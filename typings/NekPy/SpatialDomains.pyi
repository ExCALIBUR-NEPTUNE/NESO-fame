from __future__ import annotations
from collections.abc import MutableMapping, Sequence, MutableSequence
from enum import Enum
from typing import Optional, overload

from NekPy import LibUtilities

class Geometry:
    def GetCoordim(self) -> int: ...
    def GetGlobalID(self) -> int: ...
    def SetGlobalID(self, val: int, /) -> None: ...
    def Setup(self) -> None: ...
    def FillGeom(self) -> None: ...
    def GenGeomFactors(self, geom: Geometry, /) -> None: ...
    def ContainsPoint(self, gloCoord: Sequence[float]) -> bool: ...
    def GetVertex(self, i: int, /) -> PointGeom: ...
    def GetEdge(self, i: int, /) -> Geometry1D: ...
    def GetFace(self, i: int, /) -> Geometry2D: ...
    def GetVid(self, i: int, /) -> int: ...
    def GetEid(self, i: int, /) -> int: ...
    def GetFid(self, i: int, /) -> int: ...
    def GetTid(self, i: int, /) -> int: ...
    def GetNumVerts(self) -> int: ...
    def GetNumEdges(self) -> int: ...
    def GetNumFaces(self) -> int: ...
    def GetShapeDim(self) -> int: ...
    def GetShapeType(self) -> LibUtilities.ShapeType: ...

    # Haven't written bindings for StandardRegions yet
    # def GetEorient(self) -> StandardRegions.Orientation: ...
    # def GetForient(self) -> StandardRegions.Orientation: ...
    # def GetXmap(self) -> StdRegions.StdExpansion: ...

    def GetCoeffs(self, i: int, /) -> Sequence[float]: ...

class Geometry1D(Geometry): ...
class Geometry2D(Geometry): ...
class Geometry3D(Geometry): ...

class PointGeom(Geometry):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, coordim: int, vid: int, x: float, y: float, z: float, /
    ) -> None: ...
    def GetCoordinates(self) -> tuple[float, float, float]: ...

class SegGeom(Geometry1D):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        id: int,
        coordim: int,
        points: list[PointGeom] = ...,
        curve: Optional[Curve] = ...,
    ) -> None: ...
    def GetCurve(self) -> Curve: ...

class TriGeom(Geometry2D):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, id: int, segments: list[SegGeom] = ...) -> None: ...

class QuadGeom(Geometry2D):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, id: int, segments: list[SegGeom] = ...) -> None: ...

class TetGeom(Geometry3D):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, id: int, segments: list[TriGeom] = ...) -> None: ...

class PrismGeom(Geometry3D):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, id: int, segments: list[Geometry2D] = ...) -> None: ...

class PyrGeom(Geometry3D):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, id: int, segments: list[Geometry2D] = ...) -> None: ...

class HexGeom(Geometry3D):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, id: int, segments: list[QuadGeom] = ...) -> None: ...

class Curve:
    curveID: int
    ptype: LibUtilities.PointsType
    points: list[PointGeom]
    def __init__(self, curveID: int, type: LibUtilities.PointsType, /) -> None: ...

class Composite:
    geometries: MutableSequence[Geometry]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, geometries: list[Geometry], /) -> None: ...

class CompositeMap:
    def __init__(self) -> None: ...
    def __delitem__(self, key: int, /) -> None: ...
    def __getitem__(self, key: int, /) -> Composite: ...
    def __len__(self) -> int: ...
    def __setitem__(self, key: int, value: Composite) -> None: ...

class MeshGraph:
    @staticmethod
    def Read(session: LibUtilities.SessionReader) -> MeshGraph: ...
    def Write(
        self, outfile: str, defaultExp: bool = ..., metadata: FieldMetaDataMap = ...
    ) -> None: ...
    def GetMeshDimension(self) -> int: ...
    def GetAllPointGeoms(self) -> MutableMapping[int, PointGeom]: ...
    def GetAllSegGeoms(self) -> MutableMapping[int, SegGeom]: ...
    def GetAllTriGeoms(self) -> MutableMapping[int, TriGeom]: ...
    def GetAllQuadGeoms(self) -> MutableMapping[int, QuadGeom]: ...
    def GetAllTetGeoms(self) -> MutableMapping[int, TetGeom]: ...
    def GetAllPyrGeoms(self) -> MutableMapping[int, PyrGeom]: ...
    def GetAllPrismGeoms(self) -> MutableMapping[int, PrismGeom]: ...
    def GetAllHexGeoms(self) -> MutableMapping[int, HexGeom]: ...
    def GetCurvedEdges(self) -> MutableMapping[int, Curve]: ...
    def GetCurvedFaces(self) -> MutableMapping[int, Curve]: ...
    def GetComposites(self) -> CompositeMap: ...
    def GetDomain(self) -> MutableMapping[int, CompositeMap]: ...
    def GetMovement(self) -> Movement: ...
    def GetNumElements(self) -> int: ...
    def SetExpansionInfosToEvenlySpacedPoints(self, npoints: int, /) -> None: ...
    def SetExpansionInfosToPolyOrder(self, nmodes: int, /) -> None: ...
    def SetExpansionInfoToPointOrder(self, npts: int, /) -> None: ...

class MeshGraphXml(MeshGraph):
    def __init__(self, meshDim: int, spatialDim: int, /) -> None: ...

class MeshGraphXmlCompressed(MeshGraphXml):
    def __init__(self, meshDim: int, spatialDim: int, /) -> None: ...

class MovementType(Enum):
    Fixed = ...
    Rotate = ...
    Translate = ...
    Prescribe = ...

class Zone:
    def GetMovementType(self) -> MovementType: ...
    def GetDomain(self) -> CompositeMap: ...
    def GetID(self) -> int: ...
    def GetDomainID(self) -> int: ...
    def Move(self) -> bool: ...
    def GetElements(self) -> Sequence[Geometry]: ...
    def GetMoved(self) -> bool: ...
    def ClearBoundingBoxes(self) -> None: ...

class ZoneFixed(Zone):
    def __init__(
        self, id: int, domainID: int, domain: CompositeMap, coordDim: int, /
    ) -> None: ...

# TODO: Add stubs for other Zone types

class Interface:
    def __init__(self, indx: int, edge: CompositeMap, /) -> None: ...
    def GetEdge(self, id: int, /) -> Geometry: ...
    def IsEmpty(self) -> bool: ...
    def GetId(self) -> int: ...
    def GetOppInterface(self) -> Interface: ...
    def GetCompositeIDs(self) -> Sequence[int]: ...

class InterfacePair:
    def __init__(
        self, leftInterface: Interface, rightInterface: Interface, /
    ) -> None: ...
    def GetLeftInterface(self) -> Interface: ...
    def GetRightInterface(self) -> Interface: ...

class Movement:
    def __init__(self) -> None: ...
    def GetInterfaces(self) -> dict[tuple[int, str], InterfacePair]: ...
    def GetZones(self) -> MutableMapping[int, Zone]: ...
    def PerformMovement(self, timeStep: float, /) -> None: ...
    def AddZone(self, zone: Zone, /) -> None: ...
    def AddInterface(self, name: str, left: Interface, right: Interface, /) -> None: ...

class FieldMetaDataMap: ...
